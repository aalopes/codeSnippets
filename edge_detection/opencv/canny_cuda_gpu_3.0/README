Note:

Utilizing Multiple GP
====================

In the current version, each of the OpenCV GPU algorithms can use only a single
GPU. So, to utilize multiple GPUs, you have to manually distribute the work
between GPUs. Switching active devie can be done using gpu::setDevice()
function. For more details please read Cuda C Programming Guide.

While developing algorithms for multiple GPUs, note a data passing overhead.
For primitive functions and small images, it can be significant, which may
eliminate all the advantages of having multiple GPUs. But for high-level
algorithms, consider using multi-GPU acceleration. For example, the Stereo
Block Matching algorithm has been successfully parallelized using the following
algorithm:

Split each image of the stereo pair into two horizontal overlapping stripes.
Process each pair of stripes (from the left and right images) on a separate
Fermi* GPU.
Merge the results into a single disparity map.
With this algorithm, a dual GPU gave a 180 % performance increase comparing to
the single Fermi GPU. For a source code example, see
https://github.com/Itseez/opencv/tree/master/samples/gpu/.

in <http://docs.opencv.org/2.4.11/modules/gpu/doc/introduction.html> 

2016 Alexandre Lopes
